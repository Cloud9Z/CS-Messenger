package messenger;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class  Client implements ClientInterface {
	
	
	Socket s = null;
	DataOutputStream dos = null;
	DataInputStream dis = null;
	private boolean bConnected = false;
	
	public void connect() {
		try {
			s = new Socket("127.0.0.1", 8888);
			dos = new DataOutputStream(s.getOutputStream());
			dis = new DataInputStream(s.getInputStream());
System.out.println("connected!");
			bConnected = true;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void disconnect() {
		try {
			dos.close();
			dis.close();
			s.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Precondition: userName and password are not null and not empty.
	 * 
	 * @param userName
	 * @param password
	 */
	public void createAccount(String userName, String password) {
		try {
			dos.writeUTF(userName);
			dos.writeUTF(password);
			//dos.flush();
			//dos.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	};
	
	/**
	 * Precondition: userName and password are not null and not empty.
	 * 
	 * @param userName
	 * @param password
	 */
	public void login(String userName, String password) {
		try {
							dos.writeUTF(userName);
							dos.writeUTF(password);
							//dos.flush();
							//dos.close();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
	};
	
	/**
	 * Precondition: The user is logged in and the client has received an online list from the server.
	 * Postcondition: If no user is online, the empty set is returned, else the set of online users is returned.
	 * 
	 * @return
	 */
	public Set<String> getOnlineList() {
		
	};
	
	/**
	 * 
	 * @param message
	 */
	public void sendMessage(Message message) {
		try {
			//System.out.println(s);
							dos.writeUTF(message);
							dos.flush();
							//dos.close();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
	};
	
	/**
	 * Precondition: Client has informed GUI that new message has arrived
	 * Postcondition: Returns the next message
	 * 
	 * @return
	 */
	public Message getNextMessage() {
		try {
			while(bConnected) {
				Message message = dis.readUTF();
				//System.out.println(str);
			}
		} catch (SocketException e) {
			System.out.println("Error");
		} catch (EOFException e) {
			System.out.println("Error");
		} catch (IOException e) {
			e.printStackTrace();
		} 
	};
	
	/**
	 * 
	 */
	public void requestHistoryList();
	
	/**
	 * 
	 * @return
	 */
	public List<Set<String>> getHistoryList();
	
	/**
	 * 
	 * @param users
	 */
	public void requestHistory(Set<String> users) {
		try {
			while(bConnected) {
				String str = dis.readUTF(users);
				//System.out.println(str);
				//taContent.setText(taContent.getText() + str + '\n');
			}
		} catch (SocketException e) {
			System.out.println("bye!");
		} catch (EOFException e) {
			System.out.println("bye!");
		} catch (IOException e) {
			e.printStackTrace();
		} 
	};
	
	/**
	 * 
	 * @return
	 */
	public List<Message> getNextHistory();
	
	/**
	 * 
	 * @return
	 */
	public Set<String> nextChatToClose();
	
	/**
	 * 
	 */
	public void logOut();
	
}

package messenger;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Set;
import java.util.Date;
import java.util.List;


public class  Client implements ClientInterface {
	
	
	Socket s = null;
	DataOutputStream dos = null;
	DataInputStream dis = null;
	private boolean bConnected = false;
	
	public void connect() {
		try {
			s = new Socket("127.0.0.1", 8888);
			dos = new DataOutputStream(s.getOutputStream());
			dis = new DataInputStream(s.getInputStream());
System.out.println("connected!");
			bConnected = true;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void disconnect() {
		try {
			dos.close();
			dis.close();
			s.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Precondition: userName and password are not null and not empty.
	 * 
	 * @param userName
	 * @param password
	 */
	public void createAccount(String userName, String password) {
		try {
			dos.writeUTF(ClientProtocol.signUp(userName, password));
			dos.flush();
			dos.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	};
	
	/**
	 * Precondition: userName and password are not null and not empty.
	 * 
	 * @param userName
	 * @param password
	 */
	public void login(String userName, String password) {
		try {
							dos.writeUTF(ClientProtocol.signIn(userName, password));
							dos.flush();
							dos.close();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
	};
	
	public ProtocolMessage readResponse() {
		try {
			while(bConnected) {
				String json = dis.readUTF();
				return ClientProtocol.decode(json);
			}
		} catch (SocketException e) {
			System.out.println("Error");
		} catch (EOFException e) {
			System.out.println("Error");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null; 
	};
	
	/**
	 * Precondition: The user is logged in and the client has received an online list from the server.
	 * Postcondition: If no user is online, the empty set is returned, else the set of online users is returned.
	 * 
	 * @return
	 */
	public Set<String> getOnlineList(ProtocolMessage protocolMessage) {
		return protocolMessage.getOnlineList();
	};
	
	/**
	 * 
	 * @return
	 */
	public List<Set<String>> getHistoryList(ProtocolMessage protocolMessage) {
		return protocolMessage.getHistoryList();
	};
	
	
	/**
	 * a method can get the current time.
	 * @return
	 */
	public static String getTime(){
		DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
		return dateFormat.format(new Date());
	}
	
	/**
	 * 
	 * @param message
	 */
	public void sendMessage(Message message) {
		try {
			//System.out.println(s);
							dos.writeUTF(ClientProtocol.sendMessage(message));
							dos.flush();
							//dos.close();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
	};
	
	
	/**
	 * Precondition: Client has informed GUI that new message has arrived
	 * Postcondition: Returns the next message
	 * 
	 * @return
	 */
	
	public Message getNextMessage() {

	};
	
	/**
	 * 
	 */
	public void requestHistoryList();
	
	
	/**
	 * 
	 * @param users
	 */
	public void requestHistory(Set<String> users) {

	};
	
	/**
	 * 
	 * @return
	 */
	public List<Message> getNextHistory(ProtocolMessage protocolMessage) {
		return protocolMessage.getHistory();
	}
	
	/**
	 * 
	 * @return
	 */
	public Set<String> nextChatToClose();
	
	/**
	 * 
	 */
	public void logOut();
	
}
